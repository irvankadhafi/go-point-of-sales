// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/irvankadhafi/go-point-of-sales/internal/model (interfaces: AuthUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/irvankadhafi/go-point-of-sales/internal/model"
	rbac "github.com/irvankadhafi/go-point-of-sales/rbac"
)

// MockAuthUsecase is a mock of AuthUsecase interface.
type MockAuthUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAuthUsecaseMockRecorder
}

// MockAuthUsecaseMockRecorder is the mock recorder for MockAuthUsecase.
type MockAuthUsecaseMockRecorder struct {
	mock *MockAuthUsecase
}

// NewMockAuthUsecase creates a new mock instance.
func NewMockAuthUsecase(ctrl *gomock.Controller) *MockAuthUsecase {
	mock := &MockAuthUsecase{ctrl: ctrl}
	mock.recorder = &MockAuthUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthUsecase) EXPECT() *MockAuthUsecaseMockRecorder {
	return m.recorder
}

// AuthenticateToken mocks base method.
func (m *MockAuthUsecase) AuthenticateToken(arg0 context.Context, arg1 string) (*model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthenticateToken", arg0, arg1)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AuthenticateToken indicates an expected call of AuthenticateToken.
func (mr *MockAuthUsecaseMockRecorder) AuthenticateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthenticateToken", reflect.TypeOf((*MockAuthUsecase)(nil).AuthenticateToken), arg0, arg1)
}

// DeleteSessionByID mocks base method.
func (m *MockAuthUsecase) DeleteSessionByID(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSessionByID", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSessionByID indicates an expected call of DeleteSessionByID.
func (mr *MockAuthUsecaseMockRecorder) DeleteSessionByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSessionByID", reflect.TypeOf((*MockAuthUsecase)(nil).DeleteSessionByID), arg0, arg1)
}

// FindRolePermission mocks base method.
func (m *MockAuthUsecase) FindRolePermission(arg0 context.Context, arg1 rbac.Role) (*rbac.RolePermission, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRolePermission", arg0, arg1)
	ret0, _ := ret[0].(*rbac.RolePermission)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRolePermission indicates an expected call of FindRolePermission.
func (mr *MockAuthUsecaseMockRecorder) FindRolePermission(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRolePermission", reflect.TypeOf((*MockAuthUsecase)(nil).FindRolePermission), arg0, arg1)
}

// LoginByEmailPassword mocks base method.
func (m *MockAuthUsecase) LoginByEmailPassword(arg0 context.Context, arg1 model.LoginRequest) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoginByEmailPassword", arg0, arg1)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoginByEmailPassword indicates an expected call of LoginByEmailPassword.
func (mr *MockAuthUsecaseMockRecorder) LoginByEmailPassword(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoginByEmailPassword", reflect.TypeOf((*MockAuthUsecase)(nil).LoginByEmailPassword), arg0, arg1)
}

// RefreshToken mocks base method.
func (m *MockAuthUsecase) RefreshToken(arg0 context.Context, arg1 model.RefreshTokenRequest) (*model.Session, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RefreshToken", arg0, arg1)
	ret0, _ := ret[0].(*model.Session)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RefreshToken indicates an expected call of RefreshToken.
func (mr *MockAuthUsecaseMockRecorder) RefreshToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RefreshToken", reflect.TypeOf((*MockAuthUsecase)(nil).RefreshToken), arg0, arg1)
}
