// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/irvankadhafi/go-point-of-sales/internal/model (interfaces: AppClientUsecase)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/irvankadhafi/go-point-of-sales/internal/model"
)

// MockAppClientUsecase is a mock of AppClientUsecase interface.
type MockAppClientUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockAppClientUsecaseMockRecorder
}

// MockAppClientUsecaseMockRecorder is the mock recorder for MockAppClientUsecase.
type MockAppClientUsecaseMockRecorder struct {
	mock *MockAppClientUsecase
}

// NewMockAppClientUsecase creates a new mock instance.
func NewMockAppClientUsecase(ctrl *gomock.Controller) *MockAppClientUsecase {
	mock := &MockAppClientUsecase{ctrl: ctrl}
	mock.recorder = &MockAppClientUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAppClientUsecase) EXPECT() *MockAppClientUsecaseMockRecorder {
	return m.recorder
}

// FindClient mocks base method.
func (m *MockAppClientUsecase) FindClient(arg0 context.Context, arg1, arg2 string) (*model.AppClient, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindClient", arg0, arg1, arg2)
	ret0, _ := ret[0].(*model.AppClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindClient indicates an expected call of FindClient.
func (mr *MockAppClientUsecaseMockRecorder) FindClient(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindClient", reflect.TypeOf((*MockAppClientUsecase)(nil).FindClient), arg0, arg1, arg2)
}
